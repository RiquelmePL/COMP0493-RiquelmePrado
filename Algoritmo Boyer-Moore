#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> badCharHeuristic(string pattern, int size) {
    vector<int> badchar(256, -1);
    for (int i = 0; i < size; i++) {
        badchar[(int)pattern[i]] = i;
    }
    return badchar;
}

void BoyerMoore(string text, string pattern) {
    int m = pattern.length();
    int n = text.length();
    vector<int> badchar = badCharHeuristic(pattern, m);
    int s = 0; // shift do padrão em relação ao texto

    while (s <= (n - m)) {
        int j = m - 1;

        while (j >= 0 && pattern[j] == text[s + j]) {
            j--;
        }

        if (j < 0) {
            cout << "Padrão encontrado na posição " << s << endl;
            s += (s + m < n) ? m - badchar[text[s + m]] : 1;
        } else {
            s += max(1, j - badchar[text[s + j]]);
        }
    }
}
