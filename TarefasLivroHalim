#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <algorithm>
#include <cctype>

// Tarefa 1: Concatenação de linhas até encontrar sete pontos consecutivos
std::string concatenarLinhas(const std::string& nomeArquivo) {
    std::ifstream arquivo(nomeArquivo);
    if (!arquivo.is_open()) {
        std::cerr << "Erro ao abrir o arquivo." << std::endl;
        return "";
    }

    std::string linha, T;
    bool encontrouPonto = false;

    while (std::getline(arquivo, linha)) {
        if (linha.substr(0, 7) == ".......") {
            encontrouPonto = true;
            break;
        }

        if (!T.empty()) {
            T += " ";
        }
        T += linha;
    }

    arquivo.close();
    return T;
}

// Tarefa 2: Verificar se uma string pode ser encontrada em uma string longa
std::vector<int> encontrarSubstring(const std::string& T, const std::string& P) {
    std::vector<int> indices;
    size_t pos = T.find(P);
    
    while (pos != std::string::npos) {
        indices.push_back(pos);
        pos = T.find(P, pos + 1); // Busca pela próxima ocorrência
    }

    if (indices.empty()) {
        indices.push_back(-1);
    }

    return indices;
}

// Tarefa 3: Análise simples de caracteres (dígitos, vogais e consoantes)
void analisarCaracteres(const std::string& T) {
    int digitos = 0, vogais = 0, consoantes = 0;

    for (char c : T) {
        if (std::isdigit(c)) {
            digitos++;
        } else if (std::isalpha(c)) {
            char c_lower = std::tolower(c);
            if (c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u') {
                vogais++;
            } else {
                consoantes++;
            }
        }
    }

    std::cout << "Dígitos: " << digitos << std::endl;
    std::cout << "Vogais: " << vogais << std::endl;
    std::cout << "Consoantes: " << consoantes << std::endl;
}

// Tarefa 4: Tokenização da string e ordenação lexicográfica
std::vector<std::string> tokenizarEOrdenar(const std::string& T) {
    std::vector<std::string> tokens;
    std::string token;
    std::istringstream stream(T);

    while (stream >> token) {
        token.erase(std::remove(token.begin(), token.end(), '.'), token.end());
        tokens.push_back(token);
    }

    std::transform(tokens.begin(), tokens.end(), tokens.begin(), [](unsigned char c) { return std::tolower(c); });

    std::sort(tokens.begin(), tokens.end());

    return tokens;
}

std::string menorStringLexicografica(const std::vector<std::string>& tokens) {
    if (tokens.empty()) return "";
    return tokens.front();
}

// Tarefa 5: Identificar qual palavra aparece mais vezes
std::string palavraMaisFrequente(const std::string& T) {
    std::map<std::string, int> freq;
    std::string palavra;
    std::istringstream stream(T);

    while (stream >> palavra) {
        palavra.erase(std::remove(palavra.begin(), palavra.end(), '.'), palavra.end());
        freq[palavra]++;
    }

    std::string palavraMaisFrequente;
    int maxFreq = 0;
    for (const auto& par : freq) {
        if (par.second > maxFreq) {
            maxFreq = par.second;
            palavraMaisFrequente = par.first;
        }
    }

    return palavraMaisFrequente;
}

// Tarefa 6: Contar caracteres na última linha após a linha que começa com sete pontos
int contarUltimaLinha(const std::string& nomeArquivo) {
    std::ifstream arquivo(nomeArquivo);
    if (!arquivo.is_open()) {
        std::cerr << "Erro ao abrir o arquivo." << std::endl;
        return -1;
    }

    std::string linha;
    bool encontrouPonto = false;

    while (std::getline(arquivo, linha)) {
        if (linha.substr(0, 7) == ".......") {
            encontrouPonto = true;
            break;
        }
    }

    if (!encontrouPonto) {
        arquivo.close();
        return -1;
    }

    std::string ultimaLinha;
    while (std::getline(arquivo, linha)) {
        ultimaLinha = linha;
    }

    arquivo.close();
    return ultimaLinha.size();
}
