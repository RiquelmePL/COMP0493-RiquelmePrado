#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

class Grafo {
    int V; // Número de vértices
    vector<vector<int>> capacidade;
    vector<vector<int>> fluxo;

public:
    Grafo(int V) : V(V), capacidade(V, vector<int>(V, 0)), fluxo(V, vector<int>(V, 0)) {}

    void addAresta(int u, int v, int cap) {
        capacidade[u][v] = cap;
    }

    bool bfs(int s, int t, vector<int>& parent) {
        vector<bool> visited(V, false);
        queue<int> q;
        q.push(s);
        visited[s] = true;
        parent[s] = -1;

        while (!q.empty()) {
            int u = q.front();
            q.pop();

            for (int v = 0; v < V; v++) {
                if (!visited[v] && capacidade[u][v] - fluxo[u][v] > 0) {
                    parent[v] = u;
                    if (v == t) return true;
                    visited[v] = true;
                    q.push(v);
                }
            }
        }
        return false;
    }

    int fordFulkerson(int s, int t) {
        int max_fluxo = 0;
        vector<int> parent(V);

        while (bfs(s, t, parent)) {
            int path_fluxo = INT_MAX;
            for (int v = t; v != s; v = parent[v]) {
                int u = parent[v];
                path_fluxo = min(path_fluxo, capacidade[u][v] - fluxo[u][v]);
            }

            for (int v = t; v != s; v = parent[v]) {
                int u = parent[v];
                fluxo[u][v] += path_fluxo;
                fluxo[v][u] -= path_fluxo;
            }

            max_fluxo += path_fluxo;
        }
        return max_fluxo;
    }
};
